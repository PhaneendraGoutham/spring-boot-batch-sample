apply plugin: "idea"
apply plugin: "eclipse"
apply plugin: "groovy"
apply plugin: 'spring-boot'
apply plugin: 'org.flywaydb.flyway'

defaultTasks "clean", "build", "bootRun"

project.ext {
    artifactId = 'spring-boot-batch-sample'
    springBootVersion = '1.2.4.RELEASE'
    springIntegrationVersion = '4.1.4.RELEASE'
}

def defaultEncoding = 'UTF-8'
tasks.withType(AbstractCompile) each { it.options.encoding = defaultEncoding }
tasks.withType(GroovyCompile) each { it.groovyOptions.encoding = defaultEncoding }

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'org.springframework.boot:spring-boot-gradle-plugin:1.2.4.RELEASE'
        classpath 'org.hsqldb:hsqldb:2.3.2'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.2.1'
    }
}

repositories {
    jcenter()
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-batch:$springBootVersion"
    compile "org.springframework.boot:spring-boot-starter-data-jpa:$springBootVersion"
    compile "org.springframework.integration:spring-integration-mail:$springIntegrationVersion"
    compile 'javax.mail:mail:1.4.7'
    compile 'org.hibernate:hibernate-validator:5.1.3.Final'
    compile 'org.apache.velocity:velocity:1.7'
    compile 'javax.el:el-api:2.2'
    compile 'org.projectlombok:lombok:1.16.4'
    compile 'args4j:args4j:2.32'
    compile 'org.flywaydb:flyway-core:3.2.1'
    runtime 'org.hsqldb:hsqldb:2.3.2'

//    testCompile("org.springframework.boot:spring-boot-starter-test:$springBootVersion")
    testCompile 'org.codehaus.groovy:groovy-all:2.4.3'
    testCompile 'org.spockframework:spock-core:1.0-groovy-2.4'
    testCompile 'cglib:cglib-nodep:3.1'
    testCompile 'org.objenesis:objenesis:2.1'
}

task wrapper(type: Wrapper) { gradleVersion = '2.4' }

eclipse {
    pathVariables GRADLE_REPO: file(System.properties['user.home'] + '/.gradle/cache')
}

flyway {
    url = 'jdbc:hsqldb:file:db/test'
}

bootRun {
    if (project.hasProperty('args')) {
        args project.args.split('\\s+')
    }
}
